const jwt = require("jsonwebtoken");
const TelegramBot = require("node-telegram-bot-api");

const token = process.env.REELSAVE;
const bot = new TelegramBot(token);
const botlogger = "-1002207414763";

// Instagram download bot

export const POST = async (req, res) => {
  try {
    let data = await req.json();

    const message = data.message || data.edited_message || data.callback_query?.message;
    if (!message || !message.chat || !message.text) {
      console.error("Invalid message format", data);
      return new Response(JSON.stringify({ message: "Invalid message format" }), { status: 400 });
    }

    const chatId = message.chat.id;
    const textContent = message.text || message.caption || "";

    bot.sendChatAction(chatId, "typing");

    if (textContent === "hi") {
      await bot.sendMessage(chatId, "Hello!");
    } else if (textContent === "/start") {
      const startMessage =
        "Hello! âœ¨ \n I am @reelsop_bot bot that can help you download Instagram Reels ðŸ¥‚. Just send me the link to the Reel you want to download and I will send you the download link and the video. You can also send me the Reel link in the caption of a photo or video. If you have any questions, feel free to ask!";
      await bot.sendMessage(chatId, startMessage);
    } else {
      const url = textContent.match(/(https?:\/\/[^\s]+)/g);
      if (!url) {
        await bot.sendMessage(chatId, "No URL found");
        return new Response(JSON.stringify({ message: "No URL found" }), { status: 400 });
      }

      console.log("url", url);
      const fetchurl = generateDownloadUrl(url[0]);
      console.log("fetchurl", fetchurl);

      let fetchData = await fetch("https://insta.savetube.me/downloadPostVideo", {
        method: "POST",
        headers: {
          accept: "*/*",
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ url: url[0] }),
      });

      fetchData = await fetchData.json();
      console.log("data", fetchData);

      await bot.sendVideo(chatId, fetchData.post_video_url, {
        caption: "Download your video here",
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "Download",
                url: fetchData.post_video_url,
              },
              {
                text: "Download Image",
                callback_data: JSON.stringify({ type: "download_image", url: fetchData.post_video_thumbnail }),
              },
            ],
          ],
        },
      });
    }

    return new Response(JSON.stringify({ message: "Message sent successfully" }), { status: 200 });
  } catch (error) {
    console.error("Error in POST handler", error);
    return new Response(JSON.stringify({ message: "Internal Server Error" }), { status: 500 });
  }
};

export const GET = async (req, res) => {
  console.log(req);

  const instagramUrl = "https://www.instagram.com/reels/C9fQFa9voVP/";
  const downloadUrl = generateDownloadUrl(instagramUrl);
  console.log(downloadUrl);

  return new Response(JSON.stringify({ downloadUrl }), { status: 200 });
};

function generateJwtToken() {
  const secret = process.env.JWT_SECRET || "default_secret";
  if (!secret) {
    throw new Error("JWT_SECRET is not defined");
  }
  const token = jwt.sign({ payload: "User" }, secret, { expiresIn: "30s" });
  return token;
}

function generateDownloadUrl(instagramUrl) {
  const token = generateJwtToken();
  const baseUrl = "https://insta.savetube.me/downloadPostVideo";
  return `${baseUrl}?token=${token}`;
}

// Handle callback queries
bot.on('callback_query', async (callbackQuery) => {
  try {
    const data = JSON.parse(callbackQuery.data);
    const chatId = callbackQuery.message.chat.id;

    if (data.type === "download_image") {
      await bot.sendPhoto(chatId, data.url, { caption: "Here is your image!" });
    }
  } catch (error) {
    console.error("Error in callback query handler", error);
  }
});
