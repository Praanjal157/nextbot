import { getUsers } from "../api/sendMessages/getUsers";
import { sendMessages } from "../api/sendMessages/sendMessages";

const TelegramBot = require("node-telegram-bot-api");

const token = process.env.SOPBOTUI;
const bot = new TelegramBot(token);
const botlogger = "-1002195290478";

//curl https://api.telegram.org/bot<your-bot-token>/getWebhookInfo
//curl https://api.telegram.org/bot<your-bot-token>/setWebhook?url=https://<your-endpoint-url>

export const POST = async (req, res, next) => {
  let data = await req.json();

  const message = data.message;
  console.log(message);
  const chatId = message.chat.id;
  let textContent = message.text || (message.caption ? message.caption : "");

  if (textContent === "hi") {
    bot.sendMessage(chatId, "Hello!");
  } else if (textContent == "/start") {
    bot.sendMessage(
      chatId,
      "🌟 Welcome to @ImgJourneyBot! 🌟\n\nI'm here to create magical images using prompts. Just send me a prompt, and I'll craft a unique image based on it. Let's embark on an image journey together! 🖼️\n\nJoin @SopBots to request new features or suggest new bots. We're always eager to hear from you! 🚀"
    );
  } else if (textContent == "/help") {
    bot.sendMessage(
      chatId,
      "🌟 Welcome to @ImgJourneyBot! 🌟\n\nI'm here to create magical images using prompts. Just send me a prompt, and I'll craft a unique image based on it. Let's embark on an image journey together! 🖼️\n\nJoin @SopBots to request new features or suggest new bots. We're always eager to hear from you! 🚀"
    );
  } else if (
    //if textcontent starts with /terasop then send message to terasop
    textContent.startsWith("/terasop")
  ) {
    textContent = textContent.replace("/terasop", "");
    const data = await sendMessages({
      message: textContent,
      users: await getUsers(),
      token: process.env.TERASOP,
    });

    const { succeededUsers, failedUsers } = data;
    bot.sendMessage(
      chatId,
      JSON.stringify({ message: "Messages sent successfully", 
        succeededUsers : succeededUsers.length, 
        failedUsers : failedUsers.length,
        totalUsers : succeededUsers.length + failedUsers.length
       }),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      }
    );
  } else {
    let loaderMessage = await bot.sendMessage(
      chatId,
      "Processing your Image..."
    );
    bot.sendChatAction(chatId, "typing");

    fetch("https://ask-me-api.vercel.app/api/nft", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ content: textContent }),
    })
      .then((response) => response.json())
      .then((data) => {
        const base64Data = data.nft_image;
        console.log(data);
        const imageData = Buffer.from(base64Data, "base64");
        let captionText =
          'Here is your image! generated by @imgjourneybot\nFrom Prompt :- <a href="#" onclick="document.execCommand(\'copy\'); return false;">' +
          textContent +
          "</a> \nJoin @sopbots Share your creation on @sopbotschat and Regenerate  /" +
          textContent.replaceAll(" ", "_") +
          "";
        bot
          .sendPhoto(chatId, imageData, {
            caption: captionText,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [{ text: "Regenerate", callback_data: "regenerate" }],
              ],
            },
          })
          .then(() => {
            bot.deleteMessage(chatId, loaderMessage.message_id);
          });
        bot
          .sendPhoto(botlogger, imageData, {
            caption: captionText,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [{ text: "Regenerate", callback_data: "regenerate" }],
              ],
            },
          })
          .then(() => {
            // bot.deleteMessage(chatId, loaderMessage.message_id);
          });
        // bot.sendPhoto(chatId, imageData).then(() => {
        //     // Image sent, so we can hide the loading message
        //     bot.sendMessage(chatId, 'Request processed.');
        // }).catch(error => {
        //     console.error('Error sending image:', error);
        // });
      })
      .catch((error) => {
        console.error("Error:", error);
        bot.sendMessage(
          chatId,
          "An error occurred while processing your request"
        );
      });
    // bot.sendMessage(chatId, 'Sorry, I only respond to "hi".');
  }

  return Response.json({
    message: "Message sent successfully",
  });
};

export const GET = async (req, res, next) => {
  console.log(req);
  return Response.json({});
};
